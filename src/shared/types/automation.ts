/**
 * Automation Types for LLM-Controlled Browser Automation
 */

import { RecordingSession, RecordedAction } from './recording';

/**
 * Automation action types that Claude can use
 */
export type AutomationActionType =
  | 'navigate'
  | 'click'
  | 'type'
  | 'select'
  | 'checkbox'
  | 'radio'
  | 'pressKey'
  | 'scroll'
  | 'wait'
  | 'waitForElement';

/**
 * Single automation step generated by LLM
 */
export interface AutomationStep {
  id: string;
  action: AutomationActionType;
  selector?: string;
  value?: string | boolean | number;
  description: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  error?: string;
  startTime?: number;
  endTime?: number;
  retryCount?: number;
  metadata?: Record<string, unknown>; // Additional data for rich progress updates
}

/**
 * Automation plan generated by LLM
 */
export interface AutomationPlan {
  id: string;
  steps: AutomationStep[];
  userPrompt: string;
  recordingSessionId: string;
  createdAt: number;
  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';
  completedSteps: number;
  failedSteps: number;
  totalDuration?: number;
}

/**
 * Automation execution result
 */
export interface AutomationResult {
  success: boolean;
  plan: AutomationPlan;
  error?: string;
  executionTime: number;
  sessionId?: string; // Chat session ID for tracking
}

/**
 * LLM request payload
 */
export interface LLMAutomationRequest {
  userPrompt: string;
  recordingSession: RecordingSession;
  apiKey: string;
}

/**
 * LLM response with automation steps
 */
export interface LLMAutomationResponse {
  success: boolean;
  steps?: AutomationStep[];
  error?: string;
  tokensUsed?: {
    input: number;
    output: number;
    cacheCreation?: number;
    cacheRead?: number;
  };
}

/**
 * Tool definition for Claude
 */
export interface AutomationTool {
  name: string;
  description: string;
  input_schema: {
    type: 'object';
    properties: Record<string, any>;
    required: string[];
  };
}
